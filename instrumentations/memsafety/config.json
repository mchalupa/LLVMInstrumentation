{
	"file": "memsafety.c",
	"analyses": ["libPoints_to_plugin.so"],

	"phases" : [
		{
			"globalVariablesRule":	 {
				"findGlobals": {
				"globalVariable": "<t1>",
				"getSizeTo": "<t2>"
				}
				,
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>","<t2>", "1", "__INSTR_remember"]
				},
				"in": "main"
			},
			"instructionRules":
				[
				{
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["__INSTR_set_flag"]
				},
				"where": "entry",
				"in": "*"
				},
				{
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["__INSTR_destroy_allocas"]
				},
				"where": "return",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "<t1>",
					"instruction": "alloca",
					"operands": ["<t0>"],
					// get only size of _one_ element,
					// maybe rename to "getAllocatedTypeSize"
					"getSizeTo": "<t2>"
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					// __INSTR_remember takes the pointer, size of one element
					// and number of elements and computes total size as <t2>*<t0>
					"operands": ["<t1>","<t2>", "<t0>", "__INSTR_remember"]
				},
				"where": "after",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "<t1>",
					"instruction": "call",
					"operands": ["<t2>","malloc"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>","<t2>","1", "__INSTR_remember_malloc_calloc"]
				},
				"where": "after",
				"in": "*",
				"set" : ["ALLOCATED_ON_HEAP", true]
				},
				{
				"findInstructions": [
				{
					"returnValue": "<t1>",
					"instruction": "call",
					"operands": ["<t2>","<t3>","realloc"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t2>","<t1>","<t3>", "__INSTR_realloc"]
				},
				"where": "after",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "<t1>",
					"instruction": "call",
					"operands": ["<t2>","__VERIFIER_malloc"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>","<t2>","1", "__INSTR_remember_malloc_calloc"]
				},
				"where": "after",
				"in": "*",
				"set" : ["ALLOCATED_ON_HEAP", true]
				},
				{
				"findInstructions": [
				{
					"returnValue": "<t1>",
					"instruction": "call",
					"operands": ["<t2>","__VERIFIER_malloc0"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>","<t2>","1", "__INSTR_remember_malloc_calloc"]
				},
				"where": "after",
				"in": "*",
				"set" : ["ALLOCATED_ON_HEAP", true]
				},
				{
				"findInstructions": [
				{
					"returnValue": "<t1>",
					"instruction": "call",
					"operands": ["<t2>","<t3>","calloc"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>","<t3>","<t2>", "__INSTR_remember_malloc_calloc"]
				},
				"where": "after",
				"in": "*",
				"set" : ["ALLOCATED_ON_HEAP", true]
				},
				{
				"findInstructions": [
				{
					"returnValue": "<t1>",
					"instruction": "call",
					"operands": ["<t2>","<t3>","__VERIFIER_calloc"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>","<t3>","<t2>", "__INSTR_remember_malloc_calloc"]
				},
				"where": "after",
				"in": "*",
				"set" : ["ALLOCATED_ON_HEAP", true]
				},
				{
				"findInstructions": [
				{
					"returnValue": "<t1>",
					"instruction": "call",
					"operands": ["<t2>","<t3>","__VERIFIER_calloc0"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>","<t3>","<t2>", "__INSTR_remember_malloc_calloc"]
				},
				"where": "after",
				"in": "*",
				"set" : ["ALLOCATED_ON_HEAP", true]
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>", "free"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>", "0", "__INSTR_free"]
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","*", "<t4>","*","*", "llvm.memset.p0i8.i32"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","*", "<t4>","*","*", "llvm.memset.p0i8.i64"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","*", "<t4>", "memset"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "load",
					"operands": ["<t1>"],
					"getSizeTo": "<t2>"
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t1>","<t2>", "__INSTR_check_pointer"]
				},
				"where": "before",
				"condition": ["!isValidPointer", "<t1>", "<t2>"],
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "store",
					"operands": ["<t1>", "<t2>"],
					"getSizeTo": "<t3>"
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t2>","<t3>", "__INSTR_check_pointer"]
				},
				"where": "before",
				"condition": ["!isValidPointer", "<t2>", "<t3>"],
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","*", "<t4>","memcpy"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["*","<t3>", "<t4>","memcpy"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","*", "<t4>","*","*", "llvm.memcpy.p0i8.p0i8.i32"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["*","<t3>", "<t4>","*","*", "llvm.memcpy.p0i8.p0i8.i32"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","*", "<t4>","*","*", "llvm.memcpy.p0i8.p0i8.i64"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["*","<t3>", "<t4>","*","*", "llvm.memcpy.p0i8.p0i8.i64"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","*", "<t4>","memmove"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["*","<t3>", "<t4>","memmove"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","*", "<t4>","*","*", "llvm.memmove.p0i8.p0i8.i32"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["*","<t3>", "<t4>","*","*", "llvm.memmove.p0i8.p0i8.i32"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","*", "<t4>","*","*", "llvm.memmove.p0i8.p0i8.i64"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				},
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "call",
					"operands": ["*","<t3>", "<t4>","*","*", "llvm.memmove.p0i8.p0i8.i64"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["<t3>","<t4>", "__INSTR_check_pointer"],
					"stripInboundsOffsets": "<t3>"
				},
				"where": "before",
				"in": "*"
				}
			]
		},
		// the second phase in which we add a leak check if we remembered some
		// memory allocated on heap
		{
			"instructionRules":
				[
				{
				"findInstructions": [
				{
					"returnValue": "*",
					"instruction": "ret",
					"operands": ["*"]
				}
				],
				"newInstruction": {
					"returnValue": "*",
					"instruction": "call",
					"operands": ["__INSTR_check_leaks"]
				},
				"where": "before",
				"in": "main",
				"condition" : ["ALLOCATED_ON_HEAP", true]
				}
				]
		}
	]
}
